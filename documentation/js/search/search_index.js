var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.251,1,1.463]],["body/controllers/AppController.html",[0,1.791,1,2.094,2,1.363,3,0.735,4,0.62,5,0.62,6,2.27,7,0.62,8,1.538,9,3.536,10,1.594,11,0.058,12,1.007,13,2.857,14,1.363,15,1.538,16,0.965,17,0.863,18,1.718,19,2.27,20,0.735,21,0.331,22,1.883,23,2.27,24,1.363,25,2.857,26,0.043,27,0.043]],["title/modules/AppModule.html",[28,1.463,29,1.463]],["body/modules/AppModule.html",[1,2.162,2,1.614,3,0.63,4,0.531,5,0.531,11,0.058,16,1.128,17,0.74,18,1.859,19,1.946,20,0.63,21,0.284,26,0.038,27,0.038,28,1.887,29,2.643,30,1.169,31,1.614,32,1.946,33,1.946,34,1.946,35,2.164,36,2.229,37,1.614,38,1.614,39,2.449,40,2.688,41,3.383,42,2.449,43,1.387,44,1.946,45,2.449]],["title/injectables/AppService.html",[18,1.075,46,1.075]],["body/injectables/AppService.html",[3,0.788,4,0.665,5,0.665,7,0.665,8,1.61,9,3.632,11,0.057,12,1.08,14,1.462,15,1.61,16,0.788,17,0.925,18,1.61,20,0.788,21,0.355,24,1.462,26,0.045,27,0.045,46,1.61,47,2.02,48,2.435,49,3.065,50,3.065,51,3.065]],["title/classes/Branch.html",[21,0.304,52,1.251]],["body/classes/Branch.html",[3,0.773,4,0.652,5,0.652,7,0.652,10,1.677,11,0.057,12,1.059,15,1.59,16,0.773,20,0.773,21,0.348,26,0.044,27,0.044,52,1.851,53,1.677,54,2.388,55,1.851,56,2.621,57,1.232,58,2.388,59,2.164,60,3.005,61,3.081,62,1.677,63,1.434]],["title/classes/Commit.html",[21,0.304,64,1.251]],["body/classes/Commit.html",[3,0.587,4,0.495,5,0.495,7,0.495,10,2.26,11,0.057,12,1.427,15,1.908,16,0.587,20,0.587,21,0.264,26,0.036,27,0.036,53,1.272,55,1.536,57,1.661,58,2.557,61,3.62,62,1.272,63,1.536,64,1.933,65,1.812,66,2.384,67,3.62,68,2.963,69,2.963,70,2.281,71,3.219,72,3.219,73,2.281,74,2.281,75,2.281]],["title/classes/ConfigService.html",[21,0.304,43,1.075]],["body/classes/ConfigService.html",[3,0.368,4,0.31,5,0.31,7,0.31,8,0.929,11,0.058,12,1.372,14,1.774,15,1.841,16,0.368,17,0.432,20,0.583,21,0.165,22,0.942,24,1.774,26,0.026,27,0.026,43,1.313,46,0.586,53,0.797,56,1.571,57,1.432,76,0.942,77,4.601,78,2.237,79,3.204,80,3.204,81,3.204,82,2.237,83,2.266,84,3.204,85,1.429,86,1.429,87,2.266,88,1.429,89,1.856,90,1.856,91,2.266,92,2.266,93,1.429,94,1.429,95,1.429,96,1.429,97,1.429,98,2.266,99,3.204,100,1.429,101,0.942,102,2.112,103,1.429,104,3.204,105,1.429,106,1.429,107,1.429,108,1.429,109,1.429,110,2.237,111,1.429,112,1.429,113,1.264,114,1.429,115,1.429,116,1.429,117,1.429,118,1.429,119,1.429,120,1.429,121,1.8,122,1.429,123,1.429,124,1.429,125,1.429,126,1.429,127,1.136,128,1.136]],["title/controllers/GithubApiController.html",[0,1.251,129,1.463]],["body/controllers/GithubApiController.html",[0,0.856,2,0.856,3,0.462,4,0.389,5,0.389,7,0.389,8,1.108,10,1.508,11,0.058,12,0.952,14,1.289,16,0.998,17,0.542,20,0.462,21,0.208,22,1.183,24,1.289,26,0.031,27,0.031,52,1.551,56,1.508,57,1.483,59,2.018,62,1.001,63,1.726,64,1.851,89,1.781,90,1.781,129,1.508,130,1.426,131,1.795,132,3.879,133,2.702,134,2.702,135,1.795,136,4.23,137,1.795,138,3.617,139,2.147,140,1.795,141,3.25,142,2.873,143,1.795,144,1.795,145,2.147,146,1.795,147,1.332,148,1.426,149,1.426,150,1.426,151,1.795,152,1.795,153,3.25,154,1.795,155,1.795,156,1.795,157,2.702,158,2.702,159,1.795,160,1.795,161,1.795,162,1.795,163,1.795,164,1.795]],["title/modules/GithubApiModule.html",[28,1.463,35,1.251]],["body/modules/GithubApiModule.html",[2,1.755,3,0.713,4,0.601,5,0.601,11,0.057,16,1.062,17,0.837,20,0.713,21,0.321,26,0.042,27,0.042,28,2.052,30,1.322,31,1.755,35,2.245,36,2.424,37,1.827,38,1.827,40,2.922,129,2.303,147,1.928,148,2.202,165,2.202,166,2.202,167,2.772,168,2.772]],["title/injectables/GithubApiService.html",[46,1.075,147,1.075]],["body/injectables/GithubApiService.html",[3,0.338,4,0.285,5,0.285,7,0.285,8,0.869,11,0.059,12,0.939,14,1.012,15,1.774,16,0.862,17,0.397,20,0.338,21,0.152,23,2.117,24,1.599,26,0.024,27,0.024,43,0.539,44,1.045,46,0.869,47,0.867,52,1.871,55,1.012,56,1.487,57,0.869,59,2.454,64,0.628,66,0.734,67,1.045,68,1.045,69,1.045,82,2.117,89,1.398,90,1.398,101,0.867,102,0.867,110,2.428,113,1.183,139,1.685,142,2.428,145,2.663,147,0.869,149,1.045,150,1.045,169,1.045,170,2.665,171,3.583,172,3.352,173,3.056,174,1.316,175,1.316,176,2.121,177,3.583,178,2.121,179,2.121,180,1.316,181,2.428,182,2.121,183,2.121,184,1.316,185,2.665,186,2.121,187,2.121,188,1.316,189,2.121,190,2.121,191,2.121,192,1.316,193,1.316,194,3.056,195,1.316,196,1.316,197,1.316,198,1.316,199,1.316,200,2.121,201,1.316,202,1.316,203,1.316,204,1.316,205,1.316,206,1.316]],["title/coverage.html",[207,2.336]],["body/coverage.html",[0,1.675,1,1.443,5,0.561,6,2.054,11,0.056,18,1.06,21,0.462,26,0.04,27,0.04,43,1.439,46,1.439,48,2.054,52,1.234,54,2.054,57,1.06,64,1.234,65,2.054,76,2.314,113,1.443,129,1.443,130,2.054,147,1.06,169,2.054,207,1.704,208,2.586,209,2.586,210,2.586,211,4.799,212,3.987,213,2.586,214,2.586,215,3.511,216,2.586,217,2.586,218,2.586,219,2.586,220,2.054,221,2.586,222,2.054,223,2.586,224,2.586]],["title/dependencies.html",[31,1.5,225,1.753]],["body/dependencies.html",[8,1.224,11,0.058,17,0.902,26,0.044,27,0.044,31,1.425,62,1.666,181,2.372,226,4.281,227,2.986,228,2.986,229,2.986,230,2.986,231,2.986,232,2.986,233,2.986,234,2.986,235,2.986,236,2.986,237,2.986,238,2.986,239,2.986,240,2.986,241,2.986,242,2.986,243,2.986,244,2.986,245,2.986,246,2.986]],["title/miscellaneous/functions.html",[247,1.231,248,2.498]],["body/miscellaneous/functions.html",[7,0.809,11,0.05,26,0.05,27,0.05,220,2.964,222,3.76,247,2.082,248,2.964,249,3.731]],["title/index.html",[7,0.479,250,2.207,251,2.207]],["body/index.html",[4,0.483,11,0.056,26,0.036,27,0.036,59,1.242,63,1.062,66,1.242,121,2.513,207,1.467,252,2.226,253,2.226,254,3.164,255,2.226,256,2.226,257,2.226,258,2.226,259,2.226,260,2.226,261,3.68,262,2.226,263,2.226,264,2.226,265,4.525,266,2.226,267,2.226,268,2.226,269,4.399,270,2.226,271,2.226,272,2.226,273,2.226,274,2.226,275,2.226,276,3.164,277,3.164,278,2.226,279,2.226,280,2.226,281,3.164,282,3.164,283,2.226,284,2.226,285,2.226,286,2.226,287,2.226,288,1.768,289,2.226,290,2.226,291,2.226,292,2.226,293,2.226,294,2.226,295,2.226,296,2.226,297,2.226,298,2.226,299,2.226,300,2.226,301,2.226,302,2.226,303,2.226,304,2.226,305,1.768]],["title/modules.html",[30,1.691]],["body/modules.html",[11,0.05,26,0.05,27,0.05,29,2.033,30,1.738,35,1.738,288,3.474,306,4.372,307,4.372,308,4.372]],["title/overview.html",[309,2.816]],["body/overview.html",[2,1.416,11,0.053,18,1.749,26,0.044,27,0.044,29,2.674,30,1.416,31,1.835,32,2.357,33,2.357,34,2.357,35,2.232,36,2.535,37,1.955,38,1.955,47,1.955,53,1.655,147,1.749,165,2.357,166,2.357,309,2.357,310,4.268,311,2.967]],["title/properties.html",[55,1.5,225,1.753]],["body/properties.html",[11,0.057,26,0.05,27,0.05,55,1.738,63,1.738,66,2.033,305,2.894,312,3.643,313,3.643,314,3.643]],["title/miscellaneous/variables.html",[247,1.231,315,2.498]],["body/miscellaneous/variables.html",[7,0.766,11,0.055,26,0.049,27,0.049,43,1.759,76,2.328,78,2.806,101,2.328,102,2.328,113,1.971,127,2.806,128,2.806,247,1.971,315,2.806,316,3.532]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":313,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":242,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":217,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["16.0.3",{"_index":238,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":310,"title":{},"body":{"overview.html":{}}}],["2.0.10",{"_index":239,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":138,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["3",{"_index":311,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":244,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":232,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":218,"title":{},"body":{"coverage.html":{}}}],["6.1.3",{"_index":230,"title":{},"body":{"dependencies.html":{}}}],["6.7.0",{"_index":236,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":246,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":226,"title":{},"body":{"dependencies.html":{}}}],["_commit",{"_index":200,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["amazing",{"_index":289,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":151,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["apioperation",{"_index":152,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["apiproperty",{"_index":61,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{}}}],["apiproperty({description",{"_index":58,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{}}}],["apiresponse",{"_index":153,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["apitags",{"_index":154,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["apitags('branches",{"_index":157,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["app",{"_index":267,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":260,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":171,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["auth",{"_index":182,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["author",{"_index":66,"title":{},"body":{"classes/Commit.html":{},"injectables/GithubApiService.html":{},"index.html":{},"properties.html":{}}}],["author_id",{"_index":203,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["await",{"_index":187,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["backers",{"_index":290,"title":{},"body":{"index.html":{}}}],["banch",{"_index":195,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["boolean",{"_index":106,"title":{},"body":{"classes/ConfigService.html":{}}}],["bootstrap",{"_index":222,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":52,"title":{"classes/Branch.html":{}},"body":{"classes/Branch.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["branch.name",{"_index":193,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["branch/branch",{"_index":149,"title":{},"body":{"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["branches",{"_index":145,"title":{},"body":{"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["browse",{"_index":308,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":306,"title":{},"body":{"modules.html":{}}}],["building",{"_index":255,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["classes",{"_index":53,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_githubapimodule",{"_index":165,"title":{},"body":{"modules/GithubApiModule.html":{},"overview.html":{}}}],["cluster_githubapimodule_providers",{"_index":166,"title":{},"body":{"modules/GithubApiModule.html":{},"overview.html":{}}}],["commists",{"_index":176,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit",{"_index":64,"title":{"classes/Commit.html":{}},"body":{"classes/Commit.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["commit.author.id",{"_index":204,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit.commit.author.date",{"_index":206,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit.commit.author.name",{"_index":202,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit.commit.message",{"_index":205,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit.sha",{"_index":201,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["commit/commit",{"_index":150,"title":{},"body":{"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["commits",{"_index":194,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["config/config.service",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"injectables/GithubApiService.html":{}}}],["configservice",{"_index":43,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice(process.env",{"_index":127,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/variables.html":{}}}],["configservice.getgithubauthtoken",{"_index":183,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["configservice.getrepositoryowner",{"_index":190,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["const",{"_index":110,"title":{},"body":{"classes/ConfigService.html":{},"injectables/GithubApiService.html":{}}}],["constructor",{"_index":85,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor(env",{"_index":86,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/GithubApiController.html":{}},"body":{"controllers/AppController.html":{},"controllers/GithubApiController.html":{},"coverage.html":{}}}],["controller('github",{"_index":155,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"overview.html":{}}}],["coverage",{"_index":207,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creation",{"_index":71,"title":{},"body":{"classes/Commit.html":{}}}],["data",{"_index":186,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["data.map(branch",{"_index":192,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["data.map(commit",{"_index":199,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["date",{"_index":67,"title":{},"body":{"classes/Commit.html":{},"injectables/GithubApiService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"controllers/GithubApiController.html":{}}}],["default",{"_index":101,"title":{},"body":{"classes/ConfigService.html":{},"injectables/GithubApiService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":63,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{},"controllers/GithubApiController.html":{},"index.html":{},"properties.html":{}}}],["dev",{"_index":124,"title":{},"body":{"classes/ConfigService.html":{}}}],["development",{"_index":268,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":237,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":278,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":256,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":235,"title":{},"body":{"dependencies.html":{}}}],["ensurevalues",{"_index":78,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/variables.html":{}}}],["ensurevalues(keys",{"_index":92,"title":{},"body":{"classes/ConfigService.html":{}}}],["env",{"_index":91,"title":{},"body":{"classes/ConfigService.html":{}}}],["env.${key",{"_index":117,"title":{},"body":{"classes/ConfigService.html":{}}}],["error",{"_index":115,"title":{},"body":{"classes/ConfigService.html":{}}}],["error(`config",{"_index":114,"title":{},"body":{"classes/ConfigService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{}}}],["express",{"_index":229,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":123,"title":{},"body":{"classes/ConfigService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["format",{"_index":72,"title":{},"body":{"classes/Commit.html":{}}}],["framework",{"_index":254,"title":{},"body":{"index.html":{}}}],["fromder",{"_index":196,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["function",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":248,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('branches",{"_index":156,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["get('branches')@apitags('branches')@apiresponse({status",{"_index":144,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["get('branches/:branch",{"_index":161,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["get('branches/:branch')@apitags('branches')@apiresponse({status",{"_index":137,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranchcommits",{"_index":133,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranchcommits(@param",{"_index":162,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranchcommits(param",{"_index":135,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranches",{"_index":134,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranches(@query('repository",{"_index":159,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getbranches(query",{"_index":143,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["getgithubauthtoken",{"_index":79,"title":{},"body":{"classes/ConfigService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getport",{"_index":80,"title":{},"body":{"classes/ConfigService.html":{}}}],["getrepositoryowner",{"_index":81,"title":{},"body":{"classes/ConfigService.html":{}}}],["getting",{"_index":250,"title":{"index.html":{}},"body":{}}],["getvalue",{"_index":83,"title":{},"body":{"classes/ConfigService.html":{}}}],["getvalue(key",{"_index":98,"title":{},"body":{"classes/ConfigService.html":{}}}],["github",{"_index":132,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["github_api.controller",{"_index":168,"title":{},"body":{"modules/GithubApiModule.html":{}}}],["github_api.service",{"_index":148,"title":{},"body":{"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{}}}],["github_api/github_api.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["github_personal_token",{"_index":128,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/variables.html":{}}}],["githubapicontroller",{"_index":129,"title":{"controllers/GithubApiController.html":{}},"body":{"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"coverage.html":{}}}],["githubapimodule",{"_index":35,"title":{"modules/GithubApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"modules.html":{},"overview.html":{}}}],["githubapiservice",{"_index":147,"title":{"injectables/GithubApiService.html":{}},"body":{"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"overview.html":{}}}],["given",{"_index":177,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["grow",{"_index":285,"title":{},"body":{"index.html":{}}}],["hello",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":296,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":302,"title":{},"body":{"index.html":{}}}],["id",{"_index":68,"title":{},"body":{"classes/Commit.html":{},"injectables/GithubApiService.html":{}}}],["identifier",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{}}}],["imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{}}}],["injectable",{"_index":46,"title":{"injectables/AppService.html":{},"injectables/GithubApiService.html":{}},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["injectables",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"injectables/GithubApiService.html":{},"overview.html":{}}}],["installation",{"_index":264,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":266,"title":{},"body":{"index.html":{}}}],["isproduction",{"_index":84,"title":{},"body":{"classes/ConfigService.html":{}}}],["join",{"_index":292,"title":{},"body":{"index.html":{}}}],["k",{"_index":108,"title":{},"body":{"classes/ConfigService.html":{}}}],["kamil",{"_index":299,"title":{},"body":{"index.html":{}}}],["key",{"_index":103,"title":{},"body":{"classes/ConfigService.html":{}}}],["keys",{"_index":94,"title":{},"body":{"classes/ConfigService.html":{}}}],["keys.foreach(k",{"_index":118,"title":{},"body":{"classes/ConfigService.html":{}}}],["license",{"_index":305,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":282,"title":{},"body":{"index.html":{}}}],["list",{"_index":139,"title":{},"body":{"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["listbranchcommits",{"_index":172,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["listbranchcommits(repository",{"_index":174,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["listrepositorybranches",{"_index":173,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["listrepositorybranches(repository",{"_index":179,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["literal",{"_index":87,"title":{},"body":{"classes/ConfigService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":69,"title":{},"body":{"classes/Commit.html":{},"injectables/GithubApiService.html":{}}}],["metadata",{"_index":241,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"dependencies.html":{}}}],["miscellaneous",{"_index":247,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":116,"title":{},"body":{"classes/ConfigService.html":{}}}],["mit",{"_index":281,"title":{},"body":{"index.html":{}}}],["mode",{"_index":121,"title":{},"body":{"classes/ConfigService.html":{},"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":295,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":300,"title":{},"body":{"index.html":{}}}],["name",{"_index":56,"title":{},"body":{"classes/Branch.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["nest",{"_index":261,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":304,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":227,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":228,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":62,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{},"controllers/GithubApiController.html":{},"dependencies.html":{}}}],["new",{"_index":113,"title":{},"body":{"classes/ConfigService.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":253,"title":{},"body":{"index.html":{}}}],["npm",{"_index":265,"title":{},"body":{"index.html":{}}}],["octokit",{"_index":181,"title":{},"body":{"injectables/GithubApiService.html":{},"dependencies.html":{}}}],["octokit/core",{"_index":231,"title":{},"body":{"dependencies.html":{}}}],["octokit/plugin",{"_index":233,"title":{},"body":{"dependencies.html":{}}}],["octokitclient",{"_index":170,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["open",{"_index":283,"title":{},"body":{"index.html":{}}}],["optional",{"_index":90,"title":{},"body":{"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"overview.html":{}}}],["overview",{"_index":309,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":189,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["package",{"_index":225,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":141,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["param.branch",{"_index":164,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["params",{"_index":185,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["please",{"_index":293,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":131,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["private",{"_index":82,"title":{},"body":{"classes/ConfigService.html":{},"injectables/GithubApiService.html":{}}}],["production",{"_index":273,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":252,"title":{},"body":{"index.html":{}}}],["project",{"_index":284,"title":{},"body":{"index.html":{}}}],["promise",{"_index":142,"title":{},"body":{"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["properties",{"_index":55,"title":{"properties.html":{}},"body":{"classes/Branch.html":{},"classes/Commit.html":{},"injectables/GithubApiService.html":{},"properties.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{}}}],["public",{"_index":77,"title":{},"body":{"classes/ConfigService.html":{}}}],["query",{"_index":136,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["read",{"_index":294,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubApiService.html":{}}}],["reflect",{"_index":240,"title":{},"body":{"dependencies.html":{}}}],["repo",{"_index":191,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["repository",{"_index":59,"title":{},"body":{"classes/Branch.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"index.html":{}}}],["require('dotenv').config",{"_index":107,"title":{},"body":{"classes/ConfigService.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"overview.html":{}}}],["respository",{"_index":178,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["rest",{"_index":234,"title":{},"body":{"dependencies.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{}}}],["rimraf",{"_index":243,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":269,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":245,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":257,"title":{},"body":{"index.html":{}}}],["server",{"_index":258,"title":{},"body":{"index.html":{}}}],["sha",{"_index":198,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["side",{"_index":259,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"modules/GithubApiModule.html":{},"injectables/GithubApiService.html":{},"index.html":{}}}],["sponsors",{"_index":287,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/config.service.ts",{"_index":76,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.service.ts:16",{"_index":93,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:21",{"_index":96,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:25",{"_index":105,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:30",{"_index":97,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:34",{"_index":95,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:4",{"_index":88,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:7",{"_index":100,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/github_api/branch/branch.ts",{"_index":54,"title":{},"body":{"classes/Branch.html":{},"coverage.html":{}}}],["src/github_api/branch/branch.ts:5",{"_index":60,"title":{},"body":{"classes/Branch.html":{}}}],["src/github_api/commit/commit.ts",{"_index":65,"title":{},"body":{"classes/Commit.html":{},"coverage.html":{}}}],["src/github_api/commit/commit.ts:11",{"_index":75,"title":{},"body":{"classes/Commit.html":{}}}],["src/github_api/commit/commit.ts:14",{"_index":73,"title":{},"body":{"classes/Commit.html":{}}}],["src/github_api/commit/commit.ts:5",{"_index":74,"title":{},"body":{"classes/Commit.html":{}}}],["src/github_api/commit/commit.ts:8",{"_index":70,"title":{},"body":{"classes/Commit.html":{}}}],["src/github_api/github_api.controller.ts",{"_index":130,"title":{},"body":{"controllers/GithubApiController.html":{},"coverage.html":{}}}],["src/github_api/github_api.controller.ts:24",{"_index":146,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["src/github_api/github_api.controller.ts:35",{"_index":140,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["src/github_api/github_api.module.ts",{"_index":167,"title":{},"body":{"modules/GithubApiModule.html":{}}}],["src/github_api/github_api.service.ts",{"_index":169,"title":{},"body":{"injectables/GithubApiService.html":{},"coverage.html":{}}}],["src/github_api/github_api.service.ts:18",{"_index":180,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["src/github_api/github_api.service.ts:33",{"_index":175,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["src/github_api/github_api.service.ts:9",{"_index":184,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["src/main.ts",{"_index":220,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":270,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":272,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":274,"title":{},"body":{"index.html":{}}}],["started",{"_index":251,"title":{"index.html":{}},"body":{}}],["starter",{"_index":263,"title":{},"body":{"index.html":{}}}],["statements",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":158,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["stay",{"_index":297,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"injectables/GithubApiService.html":{}}}],["support",{"_index":288,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":307,"title":{},"body":{"modules.html":{}}}],["table",{"_index":224,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":277,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":280,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":279,"title":{},"body":{"index.html":{}}}],["tests",{"_index":276,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":286,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.env[key",{"_index":111,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.getvalue('github_personal_token",{"_index":126,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.getvalue('mode",{"_index":122,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.getvalue('port",{"_index":120,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.getvalue('repo_owner",{"_index":125,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.getvalue(k",{"_index":119,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.githubapiservice.listbranchcommits(query.repository",{"_index":163,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["this.githubapiservice.listrepositorybranches(query.repository",{"_index":160,"title":{},"body":{"controllers/GithubApiController.html":{}}}],["this.octokitclient.rest.repos.listbranches",{"_index":188,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["this.octokitclient.rest.repos.listcommits",{"_index":197,"title":{},"body":{"injectables/GithubApiService.html":{}}}],["throw",{"_index":112,"title":{},"body":{"classes/ConfigService.html":{}}}],["throwonmissing",{"_index":99,"title":{},"body":{"classes/ConfigService.html":{}}}],["touch",{"_index":298,"title":{},"body":{"index.html":{}}}],["true",{"_index":104,"title":{},"body":{"classes/ConfigService.html":{}}}],["twitter",{"_index":303,"title":{},"body":{"index.html":{}}}],["type",{"_index":57,"title":{},"body":{"classes/Branch.html":{},"classes/Commit.html":{},"classes/ConfigService.html":{},"controllers/GithubApiController.html":{},"injectables/GithubApiService.html":{},"coverage.html":{}}}],["typescript",{"_index":262,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":109,"title":{},"body":{"classes/ConfigService.html":{}}}],["unit",{"_index":275,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":314,"title":{},"body":{"properties.html":{}}}],["value",{"_index":102,"title":{},"body":{"classes/ConfigService.html":{},"injectables/GithubApiService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":315,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":312,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":271,"title":{},"body":{"index.html":{}}}],["website",{"_index":301,"title":{},"body":{"index.html":{}}}],["world",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":291,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/GithubApiModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nGithubApiModule\n\nGithubApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nGithubApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GithubApiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigService } from './config/config.service';\nimport { GithubApiModule } from './github_api/github_api.module';\n\n@Module({\n  imports: [GithubApiModule],\n  controllers: [AppController],\n  providers: [AppService, ConfigService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Branch.html":{"url":"classes/Branch.html","title":"class - Branch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Branch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/github_api/branch/branch.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/github_api/branch/branch.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class Branch {\n  @ApiProperty({ description: 'Repository name' })\n  name: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Commit.html":{"url":"classes/Commit.html","title":"class - Commit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Commit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/github_api/commit/commit.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The author of the commit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/github_api/commit/commit.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The creation date', format: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/github_api/commit/commit.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/github_api/commit/commit.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/github_api/commit/commit.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class Commit {\n  @ApiProperty()\n  id: string\n\n  @ApiProperty({ description: 'The author of the commit' })\n  author: string\n\n  @ApiProperty()\n  message: string\n\n  @ApiProperty({ description: 'The creation date', format: 'date' })\n  date: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ensureValues\n                            \n                            \n                                    Public\n                                getGithubAuthToken\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                getRepositoryOwner\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Public\n                                isProduction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(env: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        env\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        ensureValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    ensureValues(keys: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getGithubAuthToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGithubAuthToken()\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getPort\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRepositoryOwner\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRepositoryOwner()\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue(key: string, throwOnMissing)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    throwOnMissing\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isProduction\n                        \n                    \n                \n            \n            \n                \n                    \n                    isProduction()\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nrequire('dotenv').config();\nexport class ConfigService {\n  constructor(private env: { [k: string]: string | undefined }) { }\n\n  private getValue(key: string, throwOnMissing = true): string {\n    const value = this.env[key];\n    if (!value && throwOnMissing) {\n      throw new Error(`config error - missing env.${key}`);\n    }\n\n    return value;\n  }\n\n  public ensureValues(keys: string[]) {\n    keys.forEach(k => this.getValue(k, true));\n    return this;\n  }\n\n  public getPort() {\n    return this.getValue('PORT', true);\n  }\n\n  public isProduction() {\n    const mode = this.getValue('MODE', false);\n    return mode != 'DEV';\n  }\n\n  public getRepositoryOwner() {\n    return this.getValue('REPO_OWNER')\n  }\n\n  public getGithubAuthToken () {\n    return this.getValue('GITHUB_PERSONAL_TOKEN')\n  }\n}\n\nconst configService = new ConfigService(process.env)\n  .ensureValues([\n    'GITHUB_PERSONAL_TOKEN'\n  ]) ;\n\nexport { configService } ;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GithubApiController.html":{"url":"controllers/GithubApiController.html","title":"controller - GithubApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GithubApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/github_api/github_api.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                github\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBranchCommits\n                            \n                            \n                                getBranches\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getBranchCommits\n                        \n                    \n                \n            \n            \n                \ngetBranchCommits(param, query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('branches/:branch')@ApiTags('branches')@ApiResponse({status: 200, description: 'Github repository commit list', type: Commit})\n                \n            \n\n            \n                \n                    Defined in src/github_api/github_api.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBranches\n                        \n                    \n                \n            \n            \n                \ngetBranches(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('branches')@ApiTags('branches')@ApiResponse({status: 200, description: 'Github repository branches', type: Branch})\n                \n            \n\n            \n                \n                    Defined in src/github_api/github_api.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, Param } from '@nestjs/common';\nimport { GithubApiService } from './github_api.service';\nimport { Branch } from './branch/branch';\nimport { Commit } from './commit/commit'\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@Controller('github')\nexport class GithubApiController {\n\n  constructor(private githubApiService: GithubApiService) {}\n\n  @Get('branches')\n  @ApiTags('branches')\n  @ApiResponse({\n    status: 200,\n    description: 'Github repository branches',\n    type: Branch\n  })\n  getBranches(@Query('repository') query): Promise {\n    return this.githubApiService.listRepositoryBranches(query.repository)\n  }\n\n  @Get('branches/:branch')\n  @ApiTags('branches')\n  @ApiResponse({\n    status: 200,\n    description: 'Github repository commit list',\n    type: Commit,\n  })\n  getBranchCommits(@Param() param, @Query() query): Promise {\n    return this.githubApiService.listBranchCommits(query.repository, param.branch)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GithubApiModule.html":{"url":"modules/GithubApiModule.html","title":"module - GithubApiModule","body":"\n                   \n\n\n\n\n    Modules\n    GithubApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GithubApiModule\n\n\n\ncluster_GithubApiModule_providers\n\n\n\n\nGithubApiService\n\nGithubApiService\n\n\n\nGithubApiModule\n\nGithubApiModule\n\nGithubApiModule -->\n\nGithubApiService->GithubApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/github_api/github_api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GithubApiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GithubApiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GithubApiController } from './github_api.controller';\nimport { GithubApiService } from './github_api.service';\n\n@Module({\n  controllers: [GithubApiController],\n  providers: [GithubApiService]\n})\nexport class GithubApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubApiService.html":{"url":"injectables/GithubApiService.html","title":"injectable - GithubApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/github_api/github_api.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                octokitClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                listBranchCommits\n                            \n                            \n                                    Async\n                                listRepositoryBranches\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listBranchCommits\n                        \n                    \n                \n            \n            \n                \n                    \n                    listBranchCommits(repository: string, branch: string)\n                \n            \n\n\n            \n                \n                    Defined in src/github_api/github_api.service.ts:33\n                \n            \n\n\n            \n                \n                    listBranchCommits - Get all commists from a given respository and branch\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repository\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    branch\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listRepositoryBranches\n                        \n                    \n                \n            \n            \n                \n                    \n                    listRepositoryBranches(repository: string)\n                \n            \n\n\n            \n                \n                    Defined in src/github_api/github_api.service.ts:18\n                \n            \n\n\n            \n                \n                    listRepositoryBranches - Get all branches of a given repository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repository\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The list of branches from the given repository\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        octokitClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Octokit({\n    auth: configService.getGithubAuthToken()\n  })\n                    \n                \n                    \n                        \n                                Defined in src/github_api/github_api.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { configService } from '../config/config.service'\nimport { Octokit } from 'octokit'\nimport { Branch } from './branch/branch'\nimport { Commit } from './commit/commit'\n\n@Injectable()\nexport class GithubApiService {\n  private readonly octokitClient = new Octokit({\n    auth: configService.getGithubAuthToken()\n  })\n\n  /**\n   * listRepositoryBranches - Get all branches of a given repository\n   * @params {string} repository The repository to get the branches from\n   * @return The list of branches from the given repository\n   */\n  async listRepositoryBranches(repository: string): Promise {\n    const { data } = await this.octokitClient.rest.repos.listBranches({\n      owner: configService.getRepositoryOwner(),\n      repo: repository\n    })\n\n    return data.map(branch => ({ name: branch.name }))\n  }\n\n  /**\n   * listBranchCommits - Get all commists from a given respository and branch\n   * @params {string} repository The repository to get the commits from\n   * @params {string} banch The branch to get the commits fromDer\n   * @return\n   */\n  async listBranchCommits (repository: string, branch: string): Promise {\n    const { data } = await this.octokitClient.rest.repos.listCommits({\n      owner: configService.getRepositoryOwner(),\n      repo: repository,\n      sha: branch\n    })\n\n    const commits = data.map(commit => {\n      const _commit = {\n        id: commit.sha,\n        author: commit.commit.author.name,\n        author_id: commit.author.id,\n        message: commit.commit.message,\n        date: commit.commit.author.date\n      }\n      return _commit\n    })\n\n    return commits\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/github_api/branch/branch.ts\n            \n            class\n            Branch\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/github_api/commit/commit.ts\n            \n            class\n            Commit\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/github_api/github_api.controller.ts\n            \n            controller\n            GithubApiController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/github_api/github_api.service.ts\n            \n            injectable\n            GithubApiService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            @octokit/core : ^4.1.0\n        \n            @octokit/plugin-rest-endpoint-methods : ^6.7.0\n        \n            dotenv : ^16.0.3\n        \n            octokit : ^2.0.10\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GithubApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_GithubApiModule\n\n\n\ncluster_GithubApiModule_providers\n\n\n\n\nGithubApiModule\n\nGithubApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nGithubApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nGithubApiService\n\nGithubApiService\n\nGithubApiModule -->\n\nGithubApiService->GithubApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configService   (src/.../config.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService(process.env)\n  .ensureValues([\n    'GITHUB_PERSONAL_TOKEN'\n  ])\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
